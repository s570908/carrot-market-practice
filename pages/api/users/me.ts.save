import { withApiSession } from "@libs/server/withSession";
import withHandler, { ResponseType } from "@libs/server/withHandler";
import { NextApiHandler, NextApiRequest, NextApiResponse } from "next";
import client from "@libs/client/client";

const handler: NextApiHandler = async (req: NextApiRequest, res: NextApiResponse<ResponseType>) => {
  console.log(`me--Cookies requested: ${JSON.stringify(req.cookies, null, 2)}`);
  console.log("me--req.session: ", req.session);

  if (req.method === "GET") {
    const profile = await client.user.findUnique({
      where: {
        id: req.session.user?.id,
      },
    });
    // console.log("me--profile: ", profile);
    res.status(200).json({ ok: true, profile });
  }

  if (req.method === "POST") {
    const {
      body: { email, name, phone },
      session: { user },
    } = req;
    console.log("api/users/me, user, email, phone, name: ", user, email, phone, name);
    const currentUser = await client.user.findUnique({
      where: { id: user?.id },
    });
    if (email && email !== currentUser?.email) {
      const alreadyEmailExists = Boolean(
        await client.user.findUnique({
          where: { email: email },
          select: { id: true },
        })
      );
      if (alreadyEmailExists) {
        return res.json({ ok: false, error: "Email already taken" });
      }
    }
    await client.user.update({
      where: {
        id: user?.id,
      },
      data: {
        email: email,
      },
    });
    if (phone && phone !== currentUser?.phone) {
      const alreadyPhoneExists = Boolean(
        await client.user.findUnique({
          where: { phone: phone },
          select: { id: true },
        })
      );
      if (alreadyPhoneExists) {
        return res.json({ ok: false, error: "Phone already taken" });
      }
    }
    await client.user.update({
      where: {
        id: user?.id,
      },
      data: {
        phone: phone,
      },
    });
    if (name && name !== currentUser?.name) {
      await client.user.update({
        where: {
          id: user?.id,
        },
        data: {
          name: name,
        },
      });
    }
    res.status(200).json({ ok: true });
  }
};

export default withApiSession(withHandler({ methods: ["GET", "POST"], handler, isPrivate: true }));
